#!/usr/bin/env python3
"""
Compiles Jupyter notebooks from source snippets.
"""
import os
import sys
import nbformat
from nbformat.v4 import new_notebook, new_markdown_cell, new_code_cell


def create_notebook(source_file, output_file):
    """
    Creates a Jupyter notebook from a Python source file.
    Looks for special comment markers to split into cells.
    """
    if not os.path.exists(source_file):
        print(f"Source file {source_file} not found.")
        return False
    
    with open(source_file, 'r') as f:
        content = f.read()
    
    # Split the content by cell markers
    # Format: 
    # # %% [markdown] - For markdown cells
    # # %% - For code cells
    lines = content.split('\n')
    cells = []
    current_cell = []
    cell_type = "code"  # Default cell type
    
    i = 0
    while i < len(lines):
        line = lines[i]
        
        if line.startswith('# %%'):
            # Save the previous cell if it's not empty
            if current_cell:
                cell_content = '\n'.join(current_cell)
                if cell_type == "markdown":
                    cells.append(new_markdown_cell(cell_content))
                else:
                    cells.append(new_code_cell(cell_content))
                current_cell = []
            
            # Determine the new cell type
            if '[markdown]' in line:
                cell_type = "markdown"
            else:
                cell_type = "code"
        else:
            # For markdown cells, remove the leading # if it exists
            if cell_type == "markdown" and line.startswith('# '):
                line = line[2:]
            current_cell.append(line)
        
        i += 1
    
    # Add the last cell if it's not empty
    if current_cell:
        cell_content = '\n'.join(current_cell)
        if cell_type == "markdown":
            cells.append(new_markdown_cell(cell_content))
        else:
            cells.append(new_code_cell(cell_content))
    
    # Create a new notebook with the cells
    nb = new_notebook(cells=cells)
    
    # Write the notebook to the output file
    with open(output_file, 'w') as f:
        nbformat.write(nb, f)
    
    print(f"Created notebook: {output_file}")
    return True


def add_warning_cell(notebook, source_file):
    """Add a warning cell to the notebook indicating it's auto-generated."""
    source_dir = os.path.dirname(source_file)
    warning_text = f"""# ⚠️ Auto-generated Notebook
    
This notebook is automatically compiled from source files in `{source_dir}`.
**Do not edit this file directly** as your changes will be overwritten.

To make changes:
1. Edit the source file `{source_file}` instead
2. Run the compile script to regenerate this notebook

See [COMPILE.md](docs/COMPILE.md) for more information.
"""
    
    warning_cell = new_markdown_cell(warning_text)
    notebook.cells.insert(0, warning_cell)
    return notebook

def main():
    """
    Main function for the script.
    Usage: python compile_examples.py <example_name>
    """
    if len(sys.argv) < 2:
        print("Usage: python compile_examples.py <example_name>")
        return
    
    # Get the project root directory
    project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    
    example_name = sys.argv[1]
    source_file = os.path.join(project_root, "src", "examples", f"{example_name}.py")
    output_file = os.path.join(project_root, "examples", f"{example_name}.ipynb")
    
    if not create_notebook(source_file, output_file):
        sys.exit(1)
        
    # Add warning cell
    with open(output_file, 'r') as f:
        nb = nbformat.read(f, as_version=4)
    
    nb = add_warning_cell(nb, source_file)
    
    with open(output_file, 'w') as f:
        nbformat.write(nb, f)
        
    print(f"Added warning cell to {output_file}")
    
    # Fix the last cell if it contains __main__ check
    for i, cell in enumerate(nb.cells):
        if '__name__ == "__main__"' in cell.source and cell.cell_type == 'markdown':
            parts = cell.source.split('if __name__ == "__main__":')
            if len(parts) > 1:
                # Update the markdown cell to exclude the main check
                nb.cells[i].source = parts[0].strip()
                
                # Add a new code cell with the main check
                main_cell = new_code_cell('if __name__ == "__main__":\n    main()')
                nb.cells.append(main_cell)
                
                # Save the updated notebook
                with open(output_file, 'w') as f:
                    nbformat.write(nb, f)
                print(f"Fixed main check in {output_file}")


if __name__ == "__main__":
    main()